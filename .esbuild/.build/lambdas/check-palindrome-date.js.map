{
  "version": 3,
  "sources": ["../../../node_modules/deep-object-js/src/isObject.js", "../../../node_modules/deep-object-js/src/get.js", "../../../node_modules/deep-object-js/index.js", "../../../lambdas/check-palindrome-date.ts"],
  "sourcesContent": ["/**\n * Checks if `obj` is object. \n * A value is object if it's not `null`, Function or Array\n *\n * @param {*} obj The value to check.\n * @returns {boolean} Returns `true` if `obj` is object, else `false`.\n * @example\n *\n * isObject({ a: '1', b: '2', c: '3' }) // => true\n *\n * isObject([1, 2, 3]) // => false\n *\n * isObject(Function) // => false\n *\n * isObject(null) // => false\n */\n\nconst isObject = (obj) => {\n    return typeof obj === 'object' && obj === Object(obj) && !Array.isArray(obj);\n}\n\nmodule.exports = {\n    isObject\n};", "const { isObject } = require('./isObject');\n\nconst _mountPathList = (path) => {\n    if (typeof path !== 'string') throw new Error('path is not a string')\n    return path.replace(/\\[(\\d+)]/g, '.$1').split('.')\n};\n\nconst get = (obj, path, def) => {\n    try {\n        if (!isObject(obj)) throw new Error('object is not accepted')\n        let pathList = _mountPathList(path);\n        let value = (pathList.every(step => (obj = obj[step]) !== undefined)) ? obj : def;\n        return value;\n    } catch (err) {\n        return (def !== undefined) ? def : undefined;\n    }\n}\n\nmodule.exports = {\n    get,\n    _mountPathList\n}", "const { get } = require('./src/get');\nconst { isObject } = require('./src/isObject');\n\nmodule.exports = {\n    get,\n    isObject\n}", "import { APIGatewayEvent, APIGatewayProxyResult } from \"aws-lambda\"\n\nimport { get } from \"deep-object-js\"\n\ninterface CheckIsPalindromeDate{\n  year: number\n  month: number\n  day: number\n}\n\nfunction checkIsPalindromeDate({year, month, day}: CheckIsPalindromeDate){\n  const dateAsString = new Date(year, month, day).toISOString()\n  const dateAsStringReversed = dateAsString.split(\"-\").reverse().join(\"-\")\n\n  return dateAsString === dateAsStringReversed\n}\n\nexport const handler = async (\n  event: APIGatewayEvent\n):Promise<APIGatewayProxyResult> => {\n  const year = get(event, \"pathParameters.year\")\n  const month = get(event, \"pathParameters.month\")\n  const day = get(event, \"pathParameters.day\")\n\n\n  if (checkIsPalindromeDate({year, month, day})) {\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        success: true,\n        message: `The date ${year}-${month}-${day} is a palindrome date!`,\n      })\n    }\n  }\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      message: `Hello ${date ?? \"World\"}!`,\n    })\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,yDAAAA,SAAA;AAiBA,QAAM,WAAW,CAAC,QAAQ;AACtB,aAAO,OAAO,QAAQ,YAAY,QAAQ,OAAO,GAAG,KAAK,CAAC,MAAM,QAAQ,GAAG;AAAA,IAC/E;AAEA,IAAAA,QAAO,UAAU;AAAA,MACb;AAAA,IACJ;AAAA;AAAA;;;ACvBA;AAAA,oDAAAC,SAAA;AAAA,QAAM,EAAE,SAAS,IAAI;AAErB,QAAM,iBAAiB,CAAC,SAAS;AAC7B,UAAI,OAAO,SAAS;AAAU,cAAM,IAAI,MAAM,sBAAsB;AACpE,aAAO,KAAK,QAAQ,aAAa,KAAK,EAAE,MAAM,GAAG;AAAA,IACrD;AAEA,QAAMC,OAAM,CAAC,KAAK,MAAM,QAAQ;AAC5B,UAAI;AACA,YAAI,CAAC,SAAS,GAAG;AAAG,gBAAM,IAAI,MAAM,wBAAwB;AAC5D,YAAI,WAAW,eAAe,IAAI;AAClC,YAAI,QAAS,SAAS,MAAM,WAAS,MAAM,IAAI,IAAI,OAAO,MAAS,IAAK,MAAM;AAC9E,eAAO;AAAA,MACX,SAAS,KAAP;AACE,eAAQ,QAAQ,SAAa,MAAM;AAAA,MACvC;AAAA,IACJ;AAEA,IAAAD,QAAO,UAAU;AAAA,MACb,KAAAC;AAAA,MACA;AAAA,IACJ;AAAA;AAAA;;;ACrBA;AAAA,kDAAAC,SAAA;AAAA,QAAM,EAAE,KAAAC,KAAI,IAAI;AAChB,QAAM,EAAE,SAAS,IAAI;AAErB,IAAAD,QAAO,UAAU;AAAA,MACb,KAAAC;AAAA,MACA;AAAA,IACJ;AAAA;AAAA;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAEA,4BAAoB;AAQpB,SAAS,sBAAsB,EAAC,MAAM,OAAO,IAAG,GAAyB;AACvE,QAAM,eAAe,IAAI,KAAK,MAAM,OAAO,GAAG,EAAE,YAAY;AAC5D,QAAM,uBAAuB,aAAa,MAAM,GAAG,EAAE,QAAQ,EAAE,KAAK,GAAG;AAEvE,SAAO,iBAAiB;AAC1B;AAEO,IAAM,UAAU,OACrB,UACkC;AAClC,QAAM,WAAO,2BAAI,OAAO,qBAAqB;AAC7C,QAAM,YAAQ,2BAAI,OAAO,sBAAsB;AAC/C,QAAM,UAAM,2BAAI,OAAO,oBAAoB;AAG3C,MAAI,sBAAsB,EAAC,MAAM,OAAO,IAAG,CAAC,GAAG;AAC7C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,SAAS,YAAY,QAAQ,SAAS;AAAA,MACxC,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU;AAAA,MACnB,SAAS,SAAS,QAAQ;AAAA,IAC5B,CAAC;AAAA,EACH;AACF;",
  "names": ["module", "module", "get", "module", "get"]
}
